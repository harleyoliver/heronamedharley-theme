/*
 * Rem Calc function - from Zurb Foundation, licenced under MIT Open Source
 */

$rem-base: 16px !default;

@function _strip-unit($num) {

	@if type-of($num) != "number" {

		@warn "num: #{$num} is not a number";

		@return null;
	}

	@return $num / ($num * 0 + 1);
}

@function _convert-to-rem($value, $base-value: $rem-base) {

	@if type-of($value) != "number" {

		@warn "value: #{$value} is not a number";

		@return null;
	}

	@if type-of($base-value) != "number" {

		@warn "base-value: #{$base-value} is not a number";

		@return null;
	}

	$value: _strip-unit($value) / _strip-unit($base-value) * 1rem;

	@if (_strip-unit($value) == 0) {
		$value: 0;
	}

	@return $value;
}

@function rem-calc($values, $base-value: $rem-base) {

	@if type-of($values) != "number" {

		@warn "values: #{$values} is not a number";

		@return null;
	}

	@if type-of($base-value) != "number" {

		@warn "base-value: #{$base-value} is not a number";

		@return null;
	}
	$max: length($values);

	@if $max == 1 {

		@return _convert-to-rem(nth($values, 1), $base-value);
	}
	$remValues: ();

	@for $i from 1 through $max {

		$remValues: append($remValues, _convert-to-rem(nth($values, $i), $base-value));
	}

	@return $remValues;
}
